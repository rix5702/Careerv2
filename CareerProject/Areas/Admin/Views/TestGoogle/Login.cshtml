<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google Sign-In Example</title>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
</head>
<body>
    <h1>Google Sign-In Demo</h1>

    <!-- Google Sign-In Button -->
    <div id="g_id_onload"
         data-client_id="496709422284-c7cbt0ho3228hu69ardbimpid56g8erc.apps.googleusercontent.com"
         data-callback="handleCredentialResponse"
         data-auto_prompt="true">
    </div>
    <div class="g_id_signin" data-type="standard"></div>

    <!-- Display User Info -->
    <div id="user-info"></div>

    <script>
        // Handle the response after Google Sign-In
        function handleCredentialResponse(response) {
            // The ID token you get after user signs in
            console.log("Encoded JWT ID token: " + response.credential);

            // You can decode the token using base64 or send it to your backend
            const data = parseJwt(response.credential);

            console.log("User Info: ", data);

            // Display user information
            document.getElementById("user-info").innerHTML = `
                <h2>User Information</h2>
                <p><strong>Name:</strong> ${data.name}</p>
                <p><strong>Email:</strong> ${data.email}</p>
                <p><strong>Picture:</strong> <img src="${data.picture}" alt="User Picture"></p>
            `;

            fetch('/TestGoogle/GoogleLogin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: data.name,
                    email: data.email
                })
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Success:', data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        // Function to decode the JWT token
        function parseJwt (token) {
            var base64Url = token.split('.')[1];
            var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));

            return JSON.parse(jsonPayload);
        }
    </script>
</body>
</html>
